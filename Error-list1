C:\Users\Dan\lab\madness_interactive\projects\rust\EventGhost-Rust>cargo check |CLIP
    Checking eventghost v0.1.0 (C:\Users\Dan\lab\madness_interactive\projects\rust\EventGhost-Rust)
error[E0432]: unresolved import `macro_::Macro`
  --> src\eg\tree\mod.rs:11:9
   |
11 | pub use macro_::Macro;
   |         ^^^^^^^^-----
   |         |       |
   |         |       help: a similar name exists in the module: `Macro_`
   |         no `Macro` in `eg::tree::macro_`


error[E0432]: unresolved import `plugin_config::PluginConfigDialog`
  --> src\eg\classes\mod.rs:29:9
   |
29 | pub use plugin_config::PluginConfigDialog;
   |         ^^^^^^^^^^^^^^^------------------
   |         |              |
   |         |              help: a similar name exists in the module: `ConfigDialog`
   |         no `PluginConfigDialog` in `eg::classes::plugin_config`

warning: unused import: `Path`
 --> src\core\config.rs:1:17
  |
1 | use std::path::{Path, PathBuf};
  |                 ^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `LevelFilter`
 --> src\core\logging.rs:4:18
  |
4 | use log::{Level, LevelFilter, Record};
  |                  ^^^^^^^^^^^

warning: unused import: `std::io`
 --> src\core\named_pipe.rs:1:5
  |
1 | use std::io;
  |     ^^^^^^^

warning: unused import: `BOOL`
 --> src\core\named_pipe.rs:2:42
  |
2 | use windows::Win32::Foundation::{HANDLE, BOOL};
  |                                          ^^^^

warning: unused import: `Result as WinResult`
  --> src\core\named_pipe.rs:13:28
   |
13 | use windows::core::{PCSTR, Result as WinResult, Error as WinError};
   |                            ^^^^^^^^^^^^^^^^^^^

warning: unused import: `ActionInfo`
 --> src\eg\action\common.rs:1:31
  |
1 | use super::base::{ActionBase, ActionInfo, ActionError};
  |                               ^^^^^^^^^^

warning: unused import: `crate::core::Error`
 --> src\eg\action\common.rs:3:5
  |
3 | use crate::core::Error;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::eg::classes::ConfigDialog`
 --> src\eg\action\common.rs:5:5
  |
5 | use crate::eg::classes::ConfigDialog;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::eg::winapi`
 --> src\eg\classes\main_frame.rs:3:5
  |
3 | use crate::eg::winapi;
  |     ^^^^^^^^^^^^^^^^^

warning: variant `ALIGN_RIGHT` should have an upper camel case name
  --> src\eg\classes\types.rs:44:5
   |
44 |     ALIGN_RIGHT = 0x0008,
   |     ^^^^^^^^^^^ help: convert the identifier to upper camel case: `AlignRight`
   |
   = note: `#[warn(non_camel_case_types)]` on by default

warning: variant `ALIGN_BOTTOM` should have an upper camel case name
  --> src\eg\classes\types.rs:45:5
   |
45 |     ALIGN_BOTTOM = 0x0020,
   |     ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `AlignBottom`

warning: variant `RETURN_CMD` should have an upper camel case name
  --> src\eg\classes\types.rs:46:5
   |
46 |     RETURN_CMD = 0x0100,
   |     ^^^^^^^^^^ help: convert the identifier to upper camel case: `ReturnCmd`

warning: unused import: `windows::Win32::UI::WindowsAndMessaging::*`
 --> src\eg\winapi\mod.rs:2:5
  |
2 | use windows::Win32::UI::WindowsAndMessaging::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `windows::Win32::UI::WindowsAndMessaging::*`
 --> src\eg\winapi\utils.rs:2:5
  |
2 | use windows::Win32::UI::WindowsAndMessaging::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `op`
   --> src\core\error.rs:113:9
    |
113 |         op: F,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_op`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `context`
   --> src\core\error.rs:114:9
    |
114 |         context: ErrorContext,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: unused variable: `strategy`
   --> src\core\error.rs:115:9
    |
115 |         strategy: RecoveryStrategy,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_strategy`

warning: unused variable: `path`
  --> src\core\plugin\registry.rs:48:37
   |
48 | ...sync fn load_plugin(&self, path: PathBuf) -> Result<Uuid, RegistryError> {
   |                               ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `id`
  --> src\core\plugin\registry.rs:54:39
   |
54 |     pub async fn unload_plugin(&self, id: Uuid) -> Result<(), RegistryError> {
   |                                       ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `id`
  --> src\core\plugin\registry.rs:60:36
   |
60 | ...async fn get_plugin(&self, id: Uuid) -> Result<Arc<RwLock<Box<dyn Plugin...
   |                               ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `id`
  --> src\core\plugin\registry.rs:72:38
   |
72 |     pub async fn start_plugin(&self, id: Uuid) -> Result<(), RegistryError> {
   |                                      ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `id`
  --> src\core\plugin\registry.rs:78:37
   |
78 |     pub async fn stop_plugin(&self, id: Uuid) -> Result<(), RegistryError> {
   |                                     ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `id`
  --> src\core\plugin\registry.rs:84:46
   |
84 | ...pdate_plugin_config(&self, id: Uuid, config: Config) -> Result<(), Regis...
   |                               ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `config`
  --> src\core\plugin\registry.rs:84:56
   |
84 | ...in_config(&self, id: Uuid, config: Config) -> Result<(), RegistryError> {
   |                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `id`
  --> src\core\plugin\registry.rs:90:43
   |
90 | ...n get_plugin_config(&self, id: Uuid) -> Result<Config, RegistryError> {
   |                               ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `config`
  --> src\core\logging.rs:64:39
   |
64 | ...nc fn update_config(&self, config: LogConfig) -> Result<(), std::io::Err...
   |                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

error[E0277]: `?` couldn't convert the error to `core::error::Error`
  --> src\eg\mod.rs:32:33
   |
32 |         plugins.load_all().await?;
   |                                 ^ the trait `From<RegistryError>` is not implemented for `core::error::Error`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             <core::error::Error as From<ConfigError>>
             <core::error::Error as From<ActionError>>
             <core::error::Error as From<futures_io::Error>>
   = note: required for `Result<(), core::error::Error>` to implement `FromResidual<Result<Infallible, RegistryError>>`

error[E0277]: `?` couldn't convert the error to `core::error::Error`
  --> src\eg\mod.rs:39:35
   |
39 |         plugins.unload_all().await?;
   |                                   ^ the trait `From<RegistryError>` is not implemented for `core::error::Error`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             <core::error::Error as From<ConfigError>>
             <core::error::Error as From<ActionError>>
             <core::error::Error as From<futures_io::Error>>
   = note: required for `Result<(), core::error::Error>` to implement `FromResidual<Result<Infallible, RegistryError>>`

error[E0277]: `?` couldn't convert the error to `core::error::Error`
  --> src\core\plugin\registry.rs:41:58
   |
41 |             loader: PluginLoader::new(plugin_dir.clone())?,
   |                                                          ^ the trait `From<LoaderError>` is not implemented for `core::error::Error`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             <core::error::Error as From<ConfigError>>
             <core::error::Error as From<ActionError>>
             <core::error::Error as From<futures_io::Error>>
   = note: required for `Result<PluginRegistry, core::error::Error>` to implement `FromResidual<Result<Infallible, LoaderError>>`

error[E0277]: `PropertyGrid` doesn't implement `std::fmt::Debug`
  --> src\eg\classes\plugin_config.rs:10:5
   |
6  | #[derive(Debug)]
   |          ----- in this derive macro expansion
...
10 |     property_grid: PropertyGrid,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `PropertyGrid` cannot be formatted using `{:?}`
   |
   = help: the trait `std::fmt::Debug` is not implemented for `PropertyGrid`
   = note: add `#[derive(Debug)]` to `PropertyGrid` or manually `impl std::fmt::Debug for PropertyGrid`
   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)

Some errors have detailed explanations: E0277, E0432.
For more information about an error, try `rustc --explain E0277`.
warning: `eventghost` (bin "eventghost") generated 26 warnings
error: could not compile `eventghost` (bin "eventghost") due to 6 previous errors; 26 warnings emitted