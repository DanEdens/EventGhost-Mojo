error[E0432]: unresolved import `windows::Win32::System::Pipes::PIPE_ACCESS_DUPLEX`
  --> src\core\named_pipe.rs:10:5
   |
10 |     PIPE_ACCESS_DUPLEX, PIPE_TYPE_MESSAGE, PIPE_READMODE_MESSAGE,
   |     ^^^^^^^^^^^^^^^^^^ no `PIPE_ACCESS_DUPLEX` in `Win32::System::Pipes`

error[E0432]: unresolved import `crate::eg::classes::plugin_config::ConfigDialog`
 --> src\eg\action\base.rs:3:5
  |
3 | use crate::eg::classes::plugin_config::ConfigDialog;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `ConfigDialog` in `eg::classes::plugin_config`

error[E0432]: unresolved import `crate::eg::classes::plugin_config::ConfigDialog`
 --> src\eg\action\group.rs:4:5
  |
4 | use crate::eg::classes::plugin_config::ConfigDialog;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `ConfigDialog` in `eg::classes::plugin_config`

error[E0432]: unresolved import `crate::eg::classes::plugin_config::ConfigDialog`
 --> src\eg\action\item.rs:4:5
  |
4 | use crate::eg::classes::plugin_config::ConfigDialog;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `ConfigDialog` in `eg::classes::plugin_config`

error[E0432]: unresolved import `crate::eg::classes::plugin_config::ConfigDialog`
 --> src\eg\action\common.rs:5:5
  |
5 | use crate::eg::classes::plugin_config::ConfigDialog;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `ConfigDialog` in `eg::classes::plugin_config`

error[E0432]: unresolved import `super::Bunch`
 --> src\eg\globals.rs:1:5
  |
1 | use super::Bunch;
  |     ^^^^^^^^^^^^ no `Bunch` in `eg`
  |
help: a similar name exists in the module
  |
1 | use super::bunch;
  |            ~~~~~
help: consider importing this struct instead
  |
1 | use crate::eg::bunch::Bunch;
  |     ~~~~~~~~~~~~~~~~~~~~~~~

error[E0432]: unresolved import `crate::core::constants`
 --> src\eg\globals.rs:2:18
  |
2 | use crate::core::constants::{DEFAULT_DEBUG_LEVEL, DEFAULT_ENCODING};
  |                  ^^^^^^^^^ could not find `constants` in `core`

error[E0432]: unresolved import `macro_::Macro`
  --> src\eg\tree\mod.rs:11:9
   |
11 | pub use macro_::Macro;
   |         ^^^^^^^^-----
   |         |       |
   |         |       help: a similar name exists in the module: `Macro_`
   |         no `Macro` in `eg::tree::macro_`

warning: unused import: `Path`
 --> src\core\config.rs:1:17
  |
1 | use std::path::{Path, PathBuf};
  |                 ^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `LevelFilter`
 --> src\core\logging.rs:4:18
  |
4 | use log::{Level, LevelFilter, Record};
  |                  ^^^^^^^^^^^

warning: unused import: `std::io`
 --> src\core\named_pipe.rs:1:5
  |
1 | use std::io;
  |     ^^^^^^^

warning: unused import: `BOOL`
 --> src\core\named_pipe.rs:2:42
  |
2 | use windows::Win32::Foundation::{HANDLE, BOOL};
  |                                          ^^^^

warning: unused import: `Result as WinResult`
  --> src\core\named_pipe.rs:13:28
   |
13 | use windows::core::{PCSTR, Result as WinResult};
   |                            ^^^^^^^^^^^^^^^^^^^

warning: unused import: `ActionInfo`
 --> src\eg\action\common.rs:1:31
  |
1 | use super::base::{ActionBase, ActionInfo, ActionError};
  |                               ^^^^^^^^^^

warning: unused import: `crate::core::Error`
 --> src\eg\action\common.rs:3:5
  |
3 | use crate::core::Error;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::eg::winapi`
 --> src\eg\classes\main_frame.rs:3:5
  |
3 | use crate::eg::winapi;
  |     ^^^^^^^^^^^^^^^^^

warning: variant `ALIGN_RIGHT` should have an upper camel case name
  --> src\eg\classes\types.rs:44:5
   |
44 |     ALIGN_RIGHT = 0x0008,
   |     ^^^^^^^^^^^ help: convert the identifier to upper camel case: `AlignRight`
   |
   = note: `#[warn(non_camel_case_types)]` on by default

warning: variant `ALIGN_BOTTOM` should have an upper camel case name
  --> src\eg\classes\types.rs:45:5
   |
45 |     ALIGN_BOTTOM = 0x0020,
   |     ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `AlignBottom`

warning: variant `RETURN_CMD` should have an upper camel case name
  --> src\eg\classes\types.rs:46:5
   |
46 |     RETURN_CMD = 0x0100,
   |     ^^^^^^^^^^ help: convert the identifier to upper camel case: `ReturnCmd`

warning: unused import: `windows::Win32::UI::WindowsAndMessaging::*`
 --> src\eg\winapi\mod.rs:2:5
  |
2 | use windows::Win32::UI::WindowsAndMessaging::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `windows::Win32::UI::WindowsAndMessaging::*`
 --> src\eg\winapi\utils.rs:2:5
  |
2 | use windows::Win32::UI::WindowsAndMessaging::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `op`
   --> src\core\error.rs:113:9
    |
113 |         op: F,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_op`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `context`
   --> src\core\error.rs:114:9
    |
114 |         context: ErrorContext,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: unused variable: `strategy`
   --> src\core\error.rs:115:9
    |
115 |         strategy: RecoveryStrategy,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_strategy`

warning: unused variable: `path`
  --> src\core\plugin\registry.rs:44:37
   |
44 | ...sync fn load_plugin(&self, path: PathBuf) -> Result<Uuid, RegistryError> {
   |                               ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `id`
  --> src\core\plugin\registry.rs:50:39
   |
50 |     pub async fn unload_plugin(&self, id: Uuid) -> Result<(), RegistryError> {
   |                                       ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `id`
  --> src\core\plugin\registry.rs:56:36
   |
56 | ...async fn get_plugin(&self, id: Uuid) -> Result<Arc<RwLock<Box<dyn Plugin...
   |                               ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `id`
  --> src\core\plugin\registry.rs:68:38
   |
68 |     pub async fn start_plugin(&self, id: Uuid) -> Result<(), RegistryError> {
   |                                      ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `id`
  --> src\core\plugin\registry.rs:74:37
   |
74 |     pub async fn stop_plugin(&self, id: Uuid) -> Result<(), RegistryError> {
   |                                     ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `id`
  --> src\core\plugin\registry.rs:80:46
   |
80 | ...pdate_plugin_config(&self, id: Uuid, config: Config) -> Result<(), Regis...
   |                               ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `config`
  --> src\core\plugin\registry.rs:80:56
   |
80 | ...in_config(&self, id: Uuid, config: Config) -> Result<(), RegistryError> {
   |                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `id`
  --> src\core\plugin\registry.rs:86:43
   |
86 | ...n get_plugin_config(&self, id: Uuid) -> Result<Config, RegistryError> {
   |                               ^^ help: if this is intentional, prefix it with an underscore: `_id`

error[E0599]: no method named `clear` found for struct `Arc<tokio::sync::RwLock<HashMap<Uuid, Box<(dyn traits::Plugin + 'static)>>>>` in the current scope
  --> src\core\plugin\registry.rs:97:22
   |
97 |         self.plugins.clear();
   |                      ^^^^^ method not found in `Arc<RwLock<HashMap<Uuid, Box<dyn Plugin>>>>`

warning: unused variable: `config`
  --> src\core\logging.rs:64:39
   |
64 | ...nc fn update_config(&self, config: LogConfig) -> Result<(), std::io::Err...
   |                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

error[E0277]: `?` couldn't convert the error to `core::error::Error`
  --> src\eg\mod.rs:32:33
   |
32 |         plugins.load_all().await?;
   |                                 ^ the trait `From<RegistryError>` is not implemented for `core::error::Error`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             <core::error::Error as From<ConfigError>>
             <core::error::Error as From<PipeError>>
             <core::error::Error as From<ActionError>>
             <core::error::Error as From<futures_io::Error>>
   = note: required for `Result<(), core::error::Error>` to implement `FromResidual<Result<Infallible, RegistryError>>`

error[E0277]: `?` couldn't convert the error to `core::error::Error`
  --> src\eg\mod.rs:39:35
   |
39 |         plugins.unload_all().await?;
   |                                   ^ the trait `From<RegistryError>` is not implemented for `core::error::Error`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             <core::error::Error as From<ConfigError>>
             <core::error::Error as From<PipeError>>
             <core::error::Error as From<ActionError>>
             <core::error::Error as From<futures_io::Error>>
   = note: required for `Result<(), core::error::Error>` to implement `FromResidual<Result<Infallible, RegistryError>>`

error[E0308]: mismatched types
  --> src\core\plugin\registry.rs:38:22
   |
38 |             plugins: HashMap::new(),
   |                      ^^^^^^^^^^^^^^ expected `Arc<RwLock<...>>`, found `HashMap<_, _>`
   |
   = note: expected struct `Arc<tokio::sync::RwLock<HashMap<Uuid, Box<(dyn traits::Plugin + 'static)>>>>`
              found struct `HashMap<_, _>`

error[E0560]: struct `PluginRegistry` has no field named `plugin_dir`
  --> src\core\plugin\registry.rs:39:13
   |
39 |             plugin_dir,
   |             ^^^^^^^^^^ `PluginRegistry` does not have this field
   |
   = note: available fields are: `loader`, `configs`

error[E0308]: mismatched types
  --> src\eg\tree\macro_.rs:59:9
   |
58 |     pub fn get_trigger_event(&self) -> Option<&dyn Event> {
   |                                        ------------------ expected `std::option::Option<&(dyn event::Event + 'static)>` because of return type
59 |         self.trigger_event.as_deref()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait `event::Event`, found trait `event::Event + Send + Sync`
   |
   = note: expected enum `std::option::Option<&(dyn event::Event + 'static)>`
              found enum `std::option::Option<&dyn event::Event + Send + Sync>`

Some errors have detailed explanations: E0277, E0308, E0432, E0560, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `eventghost` (bin "eventghost") generated 25 warnings
error: could not compile `eventghost` (bin "eventghost") due to 14 previous errors; 25 warnings emitted