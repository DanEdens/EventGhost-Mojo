# In AppVeyor's web config add an enviremont variable named GITHUB_TOKEN.
# Set it to a token you've created on GitHub.
# To draft a release on GitHub with AppVeyor, create a tag on master.

image: Visual Studio 2017
version: '{build}-{branch}'


#init:
#  # Enable Remotedesktop and pause the build execution
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))


environment:
  PYTHON: 'C:\Stackless35'
  PYTHONPATH: 'C:\Stackless35;C:\Stackless35\Scripts;C:\Stackless35\DLLs;C:\Stackless35\Lib;C:\Stackless35\Lib\site-packages;'


matrix:
  fast_finish: true


cache:
  # Invalidate cache if .appveyor.yml has changed
  - C:\Stackless35 -> .appveyor.yml
  # Manually clear cache:
  # from agithub.AppVeyor import AppVeyor
  # ci = AppVeyor(<your appveyor API token>)
  # status, data = ci.api.projects.<appveyor username>.<appveyor projectname>.buildcache.delete()
  # print status  # 204 = Ok, cache deleted


install:
  # HTML Help Workshop 1.32
  - cinst html-help-workshop

  # Microsoft Visual C++ Redistributable 2008 (version min: 9.0.21022.8)
  # - cinst vcredist2008

  #- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  - ps: |
      $Env:PATH = $Env:PYTHONPATH + ";" + $Env:PATH
      $PythonFolder = $Env:PYTHON
      $PythonScripts = $PythonFolder + "\Scripts"
      $SitePackages = $PythonFolder + "\lib\site-packages"
      $SysWOW = $Env:SYSTEMROOT + "\SysWOW64"
      $PythonWindowsDLL = $SysWOW + "\python35.dll"
      $PythonDLL = $PythonFolder + "\python35.dll"
      $InstallersFolder = $Env:APPVEYOR_BUILD_FOLDER + "\output\"

      " "
      "=============== prepare EventGhost build environment ==============="
      If (-not (Test-Path $PythonFolder))
      {
        Function PipInstall ($mod)
        {
          " "
          "--- " + $mod
          "    Installing..."
          pip install -q $mod
          "    Done."
        }
        " "
        "--- Stackless 3.5.4 x86-64"
        $StacklessInstaller = $InstallersFolder + "stackless-3.5.4-amd64.exe"
        $StacklessInstallDir = $PythonFolder
        $StacklessURL = "http://www.stackless.com/binaries/MSI/3.5.4/stackless-3.5.4-amd64.exe"
        Start-FileDownload $StacklessURL -Timeout 60000 -FileName $StacklessInstaller
        "    Installing Stackless 3.5.4..."
        Start-Process $StacklessInstaller "/quiet InstallAllUsers=1 TargetDir=$StacklessInstallDir" -Wait
        "    Done."
        " "

        "    Updating pip..."
        python -m pip install -q -U "pip"
        "    Done."
        " "
        "    Updating setuptools..."
        python -m pip install -q -U "setuptools"
        "    Done."
        " "
        PipInstall "sphinx"
        PipInstall "commonmark"
        PipInstall "pillow"
        PipInstall "pycrypto"
        PipInstall "comtypes"
        PipInstall "paramiko"
        PipInstall "pywin32"
        PipInstall "wxPython"
        PipInstall "websocket-client-py3"
        PipInstall "psutil"
        PipInstall "tornado"
        PipInstall "qrcode"
        PipInstall "pycurl"
        PipInstall "agithub"
        PipInstall "requests"
        PipInstall "cx_Freeze"
      }
      #"--- Inno Setup 5.5.9"
      #$InnoInstaller = $InstallersFolder + "innosetup-5.5.9-unicode.exe"
      #$InnoURL = "http://files.jrsoftware.org/is/5/innosetup-5.5.9-unicode.exe"
      #Start-FileDownload $InnoURL -Timeout 60000 -FileName $InnoInstaller | ForEach-Object { Write-Host "    " + $_ }
      #"    Installing Inno Setup 5.5.9..."
      #Start-Process $InnoInstaller -Arg "/SP /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /RESTARTAPPLICATIONS /NOICONS" -NoNewWindow -Wait
      #"    Done."
      " "
      " "
      "=============== start the EventGhost build ==============="
      " "
      python "setup.py" build-exe

      # Make sure the appveyor cache is only saved if our build was successfull
      $Env:SetupExe = gci -recurse -filter "output\*Setup.exe" -name
      If (-Not (Test-Path($Env:SetupExe))) {
        $env:APPVEYOR_CACHE_SKIP_SAVE = "true"
      } else {
        # update the appveyor build version to be the same as the EventGhost version
        $start = $env:SetupExe.IndexOf("_")
        $length = $env:SetupExe.LastIndexOf("_") - $start
        $build_version = $env:SetupExe.Substring($start + 1, $length - 1)
        Update-AppveyorBuild -Version "$build_version"
      }

      " "

      "=============== EventGhost build finished ==============="
      " "
      " "


build:
  off
  # If we don't turn build off, we get an error from appveyor telling us,
  # we should decide, which project or solution file to use, because the
  # folder contains more than one project or solution file.
  # We don't really "build" (with a compiler), but Appveyor finds the
  # solution files in the extension sub-directories and complains.


#after_test:
#  - cmd:  echo "=============== EventGhost build finished ==============="
#  # - cmd: START /WAIT %setup-exe% /VERYSILENT /SUPPRESSMSGBOXES /NOCLOSEAPPLICATIONS


artifacts:
  - path: _build\output\$(SetupExe)
    name: $(SetupExe)
  - path: _build\output\Build.log
    name: Build.log
  - path: _build\output\CHANGELOG.md
    name: CHANGELOG.md
  - path: _build\output\CHANGELOG_THIS_RELEASE.md
    name: CHANGELOG_THIS_RELEASE.md
  - path: _build\output\CHANGELOG_THIS_RELEASE.bb
    name: CHANGELOG_THIS_RELEASE.bb


notifications:
- provider: GitHubPullRequest
  template: >-
    [{{buildVersion}} {{status}}]({{buildUrl}}) (commit {{commitUrl}})

    Artifacts:

    {{#jobs}}
    {{#artifacts}}
    [{{name}}]({{permalink}})

    {{/artifacts}}
    {{/jobs}}

  on_build_success: true
  on_build_failure: true
  on_build_status_changed: false

- provider: Slack
  incoming_webhook:
    secure: DXo21MuJufndeGjaRDMxLgLo5yEaPf9uYg1YqrHPlfjsXUAzxRR2yGhCKcUwfLTT3gO192GKwkNAc52Y6TnxuKsNAgI+K5mBW40+6I9FOmU=

  template: >-
    <{{buildUrl}}|{{projectName}} {{buildVersion}} {{status}}>

    Commit <{{commitUrl}}|{{commitId}}> by {{commitAuthor}} on {{commitDate}}:

    Commit message: _{{commitMessage}}_


    Artifacts:

    {{#jobs}}{{#artifacts}}<{{permalink}}|{{name}}>

    {{/artifacts}}{{/jobs}}

  on_build_success: true
  on_build_failure: true
  on_build_status_changed: true



#on_finish:
#  # Enable Remotedesktop and pause the build execution
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))


# notifications:
#   - provider: GitHubPullRequest
#     template: "{{#passed}}:white_check_mark: [Setup.exe](https://ci.appveyor.com/api/buildjobs/$(APPVEYOR_JOB_ID)/artifacts/_build%2Foutput%2F$(setup-exe)){{/passed}}{{#failed}}:x:{{/failed}} [Build {{&projectName}} {{buildVersion}} {{status}}]({{buildUrl}}) (commit {{commitUrl}} by @{{&commitAuthorUsername}})"
