# In AppVeyor's web config add an enviremont variable named GITHUB_TOKEN.
# Set it to a token you've created on GitHub.
# To draft a release on GitHub with AppVeyor, create a tag on master.

image: Visual Studio 2017
version: '{build}-{branch}'


#init:
#  # Enable Remotedesktop and pause the build execution
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))


environment:
  PYTHON: 'C:\Stackless35'
  PYTHONPATH: 'C:\Stackless35;C:\Stackless35\Scripts;C:\Stackless35\DLLs;C:\Stackless35\Lib;C:\Stackless35\Lib\site-packages;'

matrix:
  fast_finish: true

cache:
  # Invalidate cache if .appveyor.yml has changed
  - C:\Stackless35 -> .appveyor.yml
  # Manually clear cache:
  # from agithub.AppVeyor import AppVeyor
  # ci = AppVeyor(<your appveyor API token>)
  # status, data = ci.api.projects.<appveyor username>.<appveyor projectname>.buildcache.delete()
  # print status  # 204 = Ok, cache deleted

install:
  # HTML Help Workshop 1.32
  - cinst html-help-workshop

  # Microsoft Visual C++ Redistributable 2008 (version min: 9.0.21022.8)
  # - cinst vcredist2008

  #- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  - ps: |
      $Env:PATH = $Env:PYTHONPATH + $Env:PATH

      If (-not (Test-Path $Env:PYTHON)) {
        " "
        "=============== Creating EventGhost build environment ==============="
        " "

        $StacklessInstaller = $Env:APPVEYOR_BUILD_FOLDER + "stackless-3.5.4-amd64.exe"
        $StacklessURL = "http://www.stackless.com/binaries/MSI/3.5.4/stackless-3.5.4-amd64.exe"
        Start-FileDownload $StacklessURL -Timeout 60000 -FileName $StacklessInstaller
        "Installing Stackless 3.5.4..."
        Start-Process $StacklessInstaller "/quiet InstallAllUsers=1 TargetDir=$Env:PYTHON" -Wait
        "Done."
        " "

        python --version

        "Updating pip"
        Start-Process "python" "-m pip install --no-cache-dir -q -U pip" -Wait
        if ($LASTEXITCODE -eq 0) {
            $host.SetShouldExit(0)
        }
        "Done"
        " "

        "Updating setuptools"
        Start-Process "python" "-m pip install --no-cache-dir -q -U setuptools" -Wait
        if ($LASTEXITCODE -eq 0) {
            $host.SetShouldExit(0)
        }
        "Done"
        " "

        Function PipInstall ($mod) {
          "Installing $mod"
          pip install --no-cache-dir -q $mod
          if ($LASTEXITCODE -eq 0) {
            $host.SetShouldExit(0)
          }
          "Done"
          " "
        }

        PipInstall sphinx
        PipInstall commonmark
        PipInstall pillow
        PipInstall pycrypto
        PipInstall comtypes
        PipInstall paramiko
        PipInstall pywin32
        PipInstall wxPython
        PipInstall websocket-client-py3
        PipInstall psutil
        PipInstall tornado
        PipInstall qrcode
        PipInstall pycurl
        PipInstall agithub
        PipInstall requests
        PipInstall cx_Freeze
      } else {
        " "
        "============= Using cached EventGhost build environment ============="
        " "
        $Env:APPVEYOR_CACHE_SKIP_SAVE = "true"
      }


build_script:
  - ps: |
      " "
      "===================== Start the EventGhost build ===================="
      " "
      python "setup.py" build_exe

      $Output = $Env:APPVEYOR_BUILD_FOLDER + "output"

      if (-not (Test-Path $Output)) {
        " "
        "====================== EventGhost build FAILED ======================"
        " "
        $host.SetShouldExit(1)
      } else {
        Push-AppveyorArtifact $Output + "\Build.log" -FileName "Build.log" -DeploymentName "Build Log"

        # Make sure the appveyor cache is only saved if our build was successfull
        $SetupExe = gci -recurse -filter "output\*Setup.exe" -name
        if (-not (Test-Path $SetupExe)) {
          " "
          "====================== EventGhost build FAILED ======================"
          " "
          $host.SetShouldExit(1)
        } else {

          # update the appveyor build version to be the same as the EventGhost version
          $start = $SetupExe.IndexOf("_")
          $length = $SetupExe.LastIndexOf("_") - $start
          $build_version = $SetupExe.Substring($start + 1, $length - 1)
          Update-AppveyorBuild -Version "$build_version"

          7z a -bsp1 -bb3 output\no_installer.zip -r build\eventghost\*.*
          Push-AppveyorArtifact "output\$SetupExe" -FileName "$SetupExe" -DeploymentName "Installer"
          Push-AppveyorArtifact "output\no_installer.zip" -FileName "no_installer.zip" -DeploymentName "NO Installer"

          " "
          "===================== EventGhost build SUCEEDED ====================="
          " "
          $host.SetShouldExit(0)
        }
      }


# artifacts:
  # - path: _build\output\CHANGELOG.md
  #   name: CHANGELOG.md
  # - path: _build\output\CHANGELOG_THIS_RELEASE.md
  #   name: CHANGELOG_THIS_RELEASE.md
  # - path: _build\output\CHANGELOG_THIS_RELEASE.bb
  #   name: CHANGELOG_THIS_RELEASE.bb

#after_test:
#  - cmd:  echo "=============== EventGhost build finished ==============="
#  # - cmd: START /WAIT %setup-exe% /VERYSILENT /SUPPRESSMSGBOXES /NOCLOSEAPPLICATIONS




#on_finish:
#  # Enable Remotedesktop and pause the build execution
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))


# notifications:
#   - provider: GitHubPullRequest
#     template: "{{#passed}}:white_check_mark: [Setup.exe](https://ci.appveyor.com/api/buildjobs/$(APPVEYOR_JOB_ID)/artifacts/_build%2Foutput%2F$(setup-exe)){{/passed}}{{#failed}}:x:{{/failed}} [Build {{&projectName}} {{buildVersion}} {{status}}]({{buildUrl}}) (commit {{commitUrl}} by @{{&commitAuthorUsername}})"
