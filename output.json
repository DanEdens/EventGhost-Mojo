{"error[E0432]: unresolved import `win32`\n --> src\\eg\\winapi\\mod.rs:7:9\n  |\n7 | pub use win32::{\n  |         ^^^^^ help: a similar path exists: `crate::win32`\n  |\n  = note: `use` statements changed in Rust 2018; read more at <https://doc.rust-lang.org/edition-guide/rust-2018/module-system/path-clarity.html>\n\n","children":[{"children":[],"code":null,"level":"note","message":"`use` statements changed in Rust 2018; read more at <https://doc.rust-lang.org/edition-guide/rust-2018/module-system/path-clarity.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"a similar path exists","rendered":null,"spans":[{"byte_end":246,"byte_start":241,"column_end":14,"column_start":9,"expansion":null,"file_name":"src\\eg\\winapi\\mod.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"crate::win32","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":14,"highlight_start":9,"text":"pub use win32::{"}]}]}],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `win32`","spans":[{"byte_end":246,"byte_start":241,"column_end":14,"column_start":9,"expansion":null,"file_name":"src\\eg\\winapi\\mod.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":9,"text":"pub use win32::{"}]}]}}
{"error[E0432]: unresolved import `windows::Win32::UI::WindowsAndMessaging::WNDCLASSA`\n     --> src\\win32\\window.rs:2:47\n      |\n2     | use windows::Win32::UI::WindowsAndMessaging::{WNDCLASSA, *};\n      |                                               ^^^^^^^^^ no `WNDCLASSA` in `Win32::UI::WindowsAndMessaging`\n      |\n      = help: consider importing this struct instead:\n              winapi::um::winuser::WNDCLASSA\nnote: found an item that was configured out\n     --> C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-0.52.0\\src\\Windows\\Win32\\UI\\WindowsAndMessaging\\mod.rs:12636:12\n      |\n12636 | pub struct WNDCLASSA {\n      |            ^^^^^^^^^\n\n","children":[{"children":[],"code":null,"level":"help","message":"consider importing this struct instead:\nwinapi::um::winuser::WNDCLASSA","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"found an item that was configured out","rendered":null,"spans":[{"byte_end":596313,"byte_start":596304,"column_end":21,"column_start":12,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-0.52.0\\src\\Windows\\Win32\\UI\\WindowsAndMessaging\\mod.rs","is_primary":true,"label":null,"line_end":12636,"line_start":12636,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"pub struct WNDCLASSA {"}]}]}],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `windows::Win32::UI::WindowsAndMessaging::WNDCLASSA`","spans":[{"byte_end":132,"byte_start":123,"column_end":56,"column_start":47,"expansion":null,"file_name":"src\\win32\\window.rs","is_primary":true,"label":"no `WNDCLASSA` in `Win32::UI::WindowsAndMessaging`","line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":47,"text":"use windows::Win32::UI::WindowsAndMessaging::{WNDCLASSA, *};"}]}]}}
{"error[E0412]: cannot find type `HWND` in this scope\n   --> src\\eg\\classes\\toolbar.rs:157:27\n    |\n157 |     fn get_hwnd(&self) -> HWND {\n    |                           ^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n1   + use crate::eg::classes::HWND;\n    |\n1   + use winapi::shared::windef::HWND;\n    |\n1   + use windows::Win32::Foundation::HWND;\n    |\n\n","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these items","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use crate::eg::classes::HWND;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use gtk::prelude::*;"}]},{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use winapi::shared::windef::HWND;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use gtk::prelude::*;"}]},{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use windows::Win32::Foundation::HWND;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use gtk::prelude::*;"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `HWND` in this scope","spans":[{"byte_end":4601,"byte_start":4597,"column_end":31,"column_start":27,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":"not found in this scope","line_end":157,"line_start":157,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":27,"text":"    fn get_hwnd(&self) -> HWND {"}]}]}}
{"error[E0425]: cannot find function, tuple struct or tuple variant `ShowWindow` in this scope\n   --> src\\eg\\classes\\toolbar.rs:163:13\n    |\n163 |             ShowWindow(self.hwnd, SW_SHOW);\n    |             ^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n1   + use winapi::um::winuser::ShowWindow;\n    |\n1   + use windows::Win32::UI::WindowsAndMessaging::ShowWindow;\n    |\n\n","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these items","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use winapi::um::winuser::ShowWindow;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use gtk::prelude::*;"}]},{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use windows::Win32::UI::WindowsAndMessaging::ShowWindow;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use gtk::prelude::*;"}]}]}],"code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","message":"cannot find function, tuple struct or tuple variant `ShowWindow` in this scope","spans":[{"byte_end":4720,"byte_start":4710,"column_end":23,"column_start":13,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":"not found in this scope","line_end":163,"line_start":163,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":13,"text":"            ShowWindow(self.hwnd, SW_SHOW);"}]}]}}
{"error[E0425]: cannot find value `SW_SHOW` in this scope\n   --> src\\eg\\classes\\toolbar.rs:163:35\n    |\n163 |             ShowWindow(self.hwnd, SW_SHOW);\n    |                                   ^^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n1   + use winapi::um::winuser::SW_SHOW;\n    |\n1   + use windows::Win32::UI::WindowsAndMessaging::SW_SHOW;\n    |\n\n","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these items","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use winapi::um::winuser::SW_SHOW;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use gtk::prelude::*;"}]},{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use windows::Win32::UI::WindowsAndMessaging::SW_SHOW;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use gtk::prelude::*;"}]}]}],"code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","message":"cannot find value `SW_SHOW` in this scope","spans":[{"byte_end":4739,"byte_start":4732,"column_end":42,"column_start":35,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":"not found in this scope","line_end":163,"line_start":163,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":35,"text":"            ShowWindow(self.hwnd, SW_SHOW);"}]}]}}
{"error[E0425]: cannot find function, tuple struct or tuple variant `ShowWindow` in this scope\n   --> src\\eg\\classes\\toolbar.rs:171:13\n    |\n171 |             ShowWindow(self.hwnd, SW_HIDE);\n    |             ^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n1   + use winapi::um::winuser::ShowWindow;\n    |\n1   + use windows::Win32::UI::WindowsAndMessaging::ShowWindow;\n    |\n\n","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these items","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use winapi::um::winuser::ShowWindow;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use gtk::prelude::*;"}]},{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use windows::Win32::UI::WindowsAndMessaging::ShowWindow;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use gtk::prelude::*;"}]}]}],"code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","message":"cannot find function, tuple struct or tuple variant `ShowWindow` in this scope","spans":[{"byte_end":4899,"byte_start":4889,"column_end":23,"column_start":13,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":"not found in this scope","line_end":171,"line_start":171,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":13,"text":"            ShowWindow(self.hwnd, SW_HIDE);"}]}]}}
{"error[E0425]: cannot find value `SW_HIDE` in this scope\n   --> src\\eg\\classes\\toolbar.rs:171:35\n    |\n171 |             ShowWindow(self.hwnd, SW_HIDE);\n    |                                   ^^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n1   + use winapi::um::winuser::SW_HIDE;\n    |\n1   + use windows::Win32::UI::WindowsAndMessaging::SW_HIDE;\n    |\n\n","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these items","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use winapi::um::winuser::SW_HIDE;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use gtk::prelude::*;"}]},{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use windows::Win32::UI::WindowsAndMessaging::SW_HIDE;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use gtk::prelude::*;"}]}]}],"code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","message":"cannot find value `SW_HIDE` in this scope","spans":[{"byte_end":4918,"byte_start":4911,"column_end":42,"column_start":35,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":"not found in this scope","line_end":171,"line_start":171,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":35,"text":"            ShowWindow(self.hwnd, SW_HIDE);"}]}]}}
{"error[E0425]: cannot find function, tuple struct or tuple variant `RegisterClassA` in this scope\n    --> src\\win32\\window.rs:20:9\n     |\n20   |           RegisterClassA(&wc).map_err(|e| Error::Win32(format!(\"Failed to register window class: {}\", e)))\n     |           ^^^^^^^^^^^^^^\n     |\n    ::: C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-0.52.0\\src\\Windows\\Win32\\UI\\WindowsAndMessaging\\mod.rs:3845:1\n     |\n3845 | / pub unsafe fn UnregisterClassA<P0, P1>(lpclassname: P0, hinstance: P1) -> ::windows_core::Result<()>\n3846 | | where\n3847 | |     P0: ::windows_core::IntoParam<::windows_core::PCSTR>,\n3848 | |     P1: ::windows_core::IntoParam<super::super::Foundation::HINSTANCE>,\n     | |_______________________________________________________________________- similarly named function `UnregisterClassA` defined here\n     |\nhelp: a function with a similar name exists\n     |\n20   |         UnregisterClassA(&wc).map_err(|e| Error::Win32(format!(\"Failed to register window class: {}\", e)))\n     |         ~~~~~~~~~~~~~~~~\nhelp: consider importing this function\n     |\n1    + use winapi::um::winuser::RegisterClassA;\n     |\n\n","children":[{"children":[],"code":null,"level":"help","message":"a function with a similar name exists","rendered":null,"spans":[{"byte_end":590,"byte_start":576,"column_end":23,"column_start":9,"expansion":null,"file_name":"src\\win32\\window.rs","is_primary":true,"label":null,"line_end":20,"line_start":20,"suggested_replacement":"UnregisterClassA","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":23,"highlight_start":9,"text":"        RegisterClassA(&wc).map_err(|e| Error::Win32(format!(\"Failed to register window class: {}\", e)))"}]}]},{"children":[],"code":null,"level":"help","message":"consider importing this function","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\win32\\window.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use winapi::um::winuser::RegisterClassA;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use windows::Win32::Foundation::{HWND, LPARAM, WPARAM, LRESULT, HINSTANCE};"}]}]}],"code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","message":"cannot find function, tuple struct or tuple variant `RegisterClassA` in this scope","spans":[{"byte_end":231623,"byte_start":231387,"column_end":72,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-0.52.0\\src\\Windows\\Win32\\UI\\WindowsAndMessaging\\mod.rs","is_primary":false,"label":"similarly named function `UnregisterClassA` defined here","line_end":3848,"line_start":3845,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":101,"highlight_start":1,"text":"pub unsafe fn UnregisterClassA<P0, P1>(lpclassname: P0, hinstance: P1) -> ::windows_core::Result<()>"},{"highlight_end":6,"highlight_start":1,"text":"where"},{"highlight_end":58,"highlight_start":1,"text":"    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,"},{"highlight_end":72,"highlight_start":1,"text":"    P1: ::windows_core::IntoParam<super::super::Foundation::HINSTANCE>,"}]},{"byte_end":590,"byte_start":576,"column_end":23,"column_start":9,"expansion":null,"file_name":"src\\win32\\window.rs","is_primary":true,"label":null,"line_end":20,"line_start":20,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":9,"text":"        RegisterClassA(&wc).map_err(|e| Error::Win32(format!(\"Failed to register window class: {}\", e)))"}]}]}}
{"error[E0425]: cannot find function, tuple struct or tuple variant `UpdateWindow` in this scope\n  --> src\\win32\\window.rs:62:9\n   |\n62 |           UpdateWindow(hwnd).map_err(|e| Error::Win32(format!(\"Failed to update window: {}\", e)))\n   |           ^^^^^^^^^^^^\n   |\n  ::: C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-0.52.0\\src\\Windows\\Win32\\UI\\WindowsAndMessaging\\mod.rs:31:1\n   |\n31 | / pub unsafe fn AnimateWindow<P0>(hwnd: P0, dwtime: u32, dwflags: ANIMATE_WINDOW_FLAGS) -> ::windows_core::Result<()>\n32 | | where\n33 | |     P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,\n   | |__________________________________________________________________- similarly named function `AnimateWindow` defined here\n   |\nhelp: a function with a similar name exists\n   |\n62 |         AnimateWindow(hwnd).map_err(|e| Error::Win32(format!(\"Failed to update window: {}\", e)))\n   |         ~~~~~~~~~~~~~\nhelp: consider importing this function\n   |\n1  + use winapi::um::winuser::UpdateWindow;\n   |\n\n","children":[{"children":[],"code":null,"level":"help","message":"a function with a similar name exists","rendered":null,"spans":[{"byte_end":1564,"byte_start":1552,"column_end":21,"column_start":9,"expansion":null,"file_name":"src\\win32\\window.rs","is_primary":true,"label":null,"line_end":62,"line_start":62,"suggested_replacement":"AnimateWindow","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":21,"highlight_start":9,"text":"        UpdateWindow(hwnd).map_err(|e| Error::Win32(format!(\"Failed to update window: {}\", e)))"}]}]},{"children":[],"code":null,"level":"help","message":"consider importing this function","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\win32\\window.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use winapi::um::winuser::UpdateWindow;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use windows::Win32::Foundation::{HWND, LPARAM, WPARAM, LRESULT, HINSTANCE};"}]}]}],"code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","message":"cannot find function, tuple struct or tuple variant `UpdateWindow` in this scope","spans":[{"byte_end":1955,"byte_start":1767,"column_end":67,"column_start":1,"expansion":null,"file_name":"C:\\Users\\Dan\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\windows-0.52.0\\src\\Windows\\Win32\\UI\\WindowsAndMessaging\\mod.rs","is_primary":false,"label":"similarly named function `AnimateWindow` defined here","line_end":33,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":116,"highlight_start":1,"text":"pub unsafe fn AnimateWindow<P0>(hwnd: P0, dwtime: u32, dwflags: ANIMATE_WINDOW_FLAGS) -> ::windows_core::Result<()>"},{"highlight_end":6,"highlight_start":1,"text":"where"},{"highlight_end":67,"highlight_start":1,"text":"    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,"}]},{"byte_end":1564,"byte_start":1552,"column_end":21,"column_start":9,"expansion":null,"file_name":"src\\win32\\window.rs","is_primary":true,"label":null,"line_end":62,"line_start":62,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":9,"text":"        UpdateWindow(hwnd).map_err(|e| Error::Win32(format!(\"Failed to update window: {}\", e)))"}]}]}}
{"error[E0425]: cannot find function, tuple struct or tuple variant `ScreenToClient` in this scope\n  --> src\\win32\\utils.rs:61:9\n   |\n61 |         ScreenToClient(hwnd, &mut pt)\n   |         ^^^^^^^^^^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  + use winapi::um::winuser::ScreenToClient;\n   |\n\n","children":[{"children":[],"code":null,"level":"help","message":"consider importing this function","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use winapi::um::winuser::ScreenToClient;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use windows::Win32::Foundation::{HWND, LPARAM, WPARAM, LRESULT, RECT, POINT};"}]}]}],"code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","message":"cannot find function, tuple struct or tuple variant `ScreenToClient` in this scope","spans":[{"byte_end":2100,"byte_start":2086,"column_end":23,"column_start":9,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":true,"label":"not found in this scope","line_end":61,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":9,"text":"        ScreenToClient(hwnd, &mut pt)"}]}]}}
{"error[E0425]: cannot find function, tuple struct or tuple variant `ClientToScreen` in this scope\n  --> src\\win32\\utils.rs:70:9\n   |\n70 |         ClientToScreen(hwnd, &mut pt)\n   |         ^^^^^^^^^^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  + use winapi::um::winuser::ClientToScreen;\n   |\n\n","children":[{"children":[],"code":null,"level":"help","message":"consider importing this function","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use winapi::um::winuser::ClientToScreen;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use windows::Win32::Foundation::{HWND, LPARAM, WPARAM, LRESULT, RECT, POINT};"}]}]}],"code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","message":"cannot find function, tuple struct or tuple variant `ClientToScreen` in this scope","spans":[{"byte_end":2387,"byte_start":2373,"column_end":23,"column_start":9,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":true,"label":"not found in this scope","line_end":70,"line_start":70,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":9,"text":"        ClientToScreen(hwnd, &mut pt)"}]}]}}
{"error[E0412]: cannot find type `BOOL` in this scope\n   --> src\\win32\\utils.rs:127:72\n    |\n127 |     unsafe extern \"system\" fn enum_proc(hwnd: HWND, lparam: LPARAM) -> BOOL {\n    |                                                                        ^^^^\n    |\nhelp: a builtin type with a similar name exists\n    |\n127 |     unsafe extern \"system\" fn enum_proc(hwnd: HWND, lparam: LPARAM) -> bool {\n    |                                                                        ~~~~\nhelp: consider importing one of these items\n    |\n1   + use winapi::shared::minwindef::BOOL;\n    |\n1   + use windows::Win32::Foundation::BOOL;\n    |\n1   + use windows::core::imp::BOOL;\n    |\n\n","children":[{"children":[],"code":null,"level":"help","message":"a builtin type with a similar name exists","rendered":null,"spans":[{"byte_end":4062,"byte_start":4058,"column_end":76,"column_start":72,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":true,"label":null,"line_end":127,"line_start":127,"suggested_replacement":"bool","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":76,"highlight_start":72,"text":"    unsafe extern \"system\" fn enum_proc(hwnd: HWND, lparam: LPARAM) -> BOOL {"}]}]},{"children":[],"code":null,"level":"help","message":"consider importing one of these items","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use winapi::shared::minwindef::BOOL;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use windows::Win32::Foundation::{HWND, LPARAM, WPARAM, LRESULT, RECT, POINT};"}]},{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use windows::Win32::Foundation::BOOL;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use windows::Win32::Foundation::{HWND, LPARAM, WPARAM, LRESULT, RECT, POINT};"}]},{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use windows::core::imp::BOOL;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use windows::Win32::Foundation::{HWND, LPARAM, WPARAM, LRESULT, RECT, POINT};"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `BOOL` in this scope","spans":[{"byte_end":4062,"byte_start":4058,"column_end":76,"column_start":72,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":true,"label":null,"line_end":127,"line_start":127,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":76,"highlight_start":72,"text":"    unsafe extern \"system\" fn enum_proc(hwnd: HWND, lparam: LPARAM) -> BOOL {"}]}]}}
{"error[E0425]: cannot find function, tuple struct or tuple variant `BOOL` in this scope\n   --> src\\win32\\utils.rs:129:9\n    |\n129 |         BOOL(if callback(hwnd) { 1 } else { 0 })\n    |         ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple struct\n    |\n1   + use windows::Win32::Foundation::BOOL;\n    |\n\n","children":[{"children":[],"code":null,"level":"help","message":"consider importing this tuple struct","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use windows::Win32::Foundation::BOOL;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use windows::Win32::Foundation::{HWND, LPARAM, WPARAM, LRESULT, RECT, POINT};"}]}]}],"code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","message":"cannot find function, tuple struct or tuple variant `BOOL` in this scope","spans":[{"byte_end":4157,"byte_start":4153,"column_end":13,"column_start":9,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":true,"label":"not found in this scope","line_end":129,"line_start":129,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":13,"highlight_start":9,"text":"        BOOL(if callback(hwnd) { 1 } else { 0 })"}]}]}}
{"error[E0308]: mismatched types\n  --> src\\eg\\classes\\tree_ctrl.rs:76:16\n   |\n76 |         if let Some(path) = self.store.path(iter) {\n   |                ^^^^^^^^^^   --------------------- this expression has type `TreePath`\n   |                |\n   |                expected `TreePath`, found `Option<_>`\n   |\n   = note: expected struct `TreePath`\n                found enum `std::option::Option<_>`\n\n","children":[{"children":[],"code":null,"level":"note","message":"expected struct `TreePath`\n     found enum `std::option::Option<_>`","rendered":null,"spans":[]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2185,"byte_start":2175,"column_end":26,"column_start":16,"expansion":null,"file_name":"src\\eg\\classes\\tree_ctrl.rs","is_primary":true,"label":"expected `TreePath`, found `Option<_>`","line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":16,"text":"        if let Some(path) = self.store.path(iter) {"}]},{"byte_end":2209,"byte_start":2188,"column_end":50,"column_start":29,"expansion":null,"file_name":"src\\eg\\classes\\tree_ctrl.rs","is_primary":false,"label":"this expression has type `TreePath`","line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":29,"text":"        if let Some(path) = self.store.path(iter) {"}]}]}}
{"error[E0308]: mismatched types\n  --> src\\eg\\classes\\tree_ctrl.rs:82:16\n   |\n82 |         if let Some(path) = self.store.path(iter) {\n   |                ^^^^^^^^^^   --------------------- this expression has type `TreePath`\n   |                |\n   |                expected `TreePath`, found `Option<_>`\n   |\n   = note: expected struct `TreePath`\n                found enum `std::option::Option<_>`\n\n","children":[{"children":[],"code":null,"level":"note","message":"expected struct `TreePath`\n     found enum `std::option::Option<_>`","rendered":null,"spans":[]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2370,"byte_start":2360,"column_end":26,"column_start":16,"expansion":null,"file_name":"src\\eg\\classes\\tree_ctrl.rs","is_primary":true,"label":"expected `TreePath`, found `Option<_>`","line_end":82,"line_start":82,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":16,"text":"        if let Some(path) = self.store.path(iter) {"}]},{"byte_end":2394,"byte_start":2373,"column_end":50,"column_start":29,"expansion":null,"file_name":"src\\eg\\classes\\tree_ctrl.rs","is_primary":false,"label":"this expression has type `TreePath`","line_end":82,"line_start":82,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":29,"text":"        if let Some(path) = self.store.path(iter) {"}]}]}}
{"error[E0609]: no field `hwnd` on type `&toolbar::Toolbar`\n   --> src\\eg\\classes\\toolbar.rs:158:14\n    |\n158 |         self.hwnd\n    |              ^^^^ unknown field\n    |\n    = note: available fields are: `widget`, `buttons`\n\n","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `widget`, `buttons`","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `hwnd` on type `&toolbar::Toolbar`","spans":[{"byte_end":4622,"byte_start":4618,"column_end":18,"column_start":14,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":"unknown field","line_end":158,"line_start":158,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":14,"text":"        self.hwnd"}]}]}}
{"error[E0609]: no field `hwnd` on type `&mut toolbar::Toolbar`\n   --> src\\eg\\classes\\toolbar.rs:163:29\n    |\n163 |             ShowWindow(self.hwnd, SW_SHOW);\n    |                             ^^^^ unknown field\n    |\n    = note: available fields are: `widget`, `buttons`\n\n","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `widget`, `buttons`","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `hwnd` on type `&mut toolbar::Toolbar`","spans":[{"byte_end":4730,"byte_start":4726,"column_end":33,"column_start":29,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":"unknown field","line_end":163,"line_start":163,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":29,"text":"            ShowWindow(self.hwnd, SW_SHOW);"}]}]}}
{"error[E0615]: attempted to take value of method `is_visible` on type `&mut toolbar::Toolbar`\n   --> src\\eg\\classes\\toolbar.rs:165:14\n    |\n165 |         self.is_visible = true;\n    |              ^^^^^^^^^^ method, not a field\n    |\n    = help: methods are immutable and cannot be assigned to\n\n","children":[{"children":[],"code":null,"level":"help","message":"methods are immutable and cannot be assigned to","rendered":null,"spans":[]}],"code":{"code":"E0615","explanation":"Attempted to access a method like a field.\n\nErroneous code example:\n\n```compile_fail,E0615\nstruct Foo {\n    x: u32,\n}\n\nimpl Foo {\n    fn method(&self) {}\n}\n\nlet f = Foo { x: 0 };\nf.method; // error: attempted to take value of method `method` on type `Foo`\n```\n\nIf you want to use a method, add `()` after it:\n\n```\n# struct Foo { x: u32 }\n# impl Foo { fn method(&self) {} }\n# let f = Foo { x: 0 };\nf.method();\n```\n\nHowever, if you wanted to access a field of a struct check that the field name\nis spelled correctly. Example:\n\n```\n# struct Foo { x: u32 }\n# impl Foo { fn method(&self) {} }\n# let f = Foo { x: 0 };\nprintln!(\"{}\", f.x);\n```\n"},"level":"error","message":"attempted to take value of method `is_visible` on type `&mut toolbar::Toolbar`","spans":[{"byte_end":4777,"byte_start":4767,"column_end":24,"column_start":14,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":"method, not a field","line_end":165,"line_start":165,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":14,"text":"        self.is_visible = true;"}]}]}}
{"error[E0609]: no field `hwnd` on type `&mut toolbar::Toolbar`\n   --> src\\eg\\classes\\toolbar.rs:171:29\n    |\n171 |             ShowWindow(self.hwnd, SW_HIDE);\n    |                             ^^^^ unknown field\n    |\n    = note: available fields are: `widget`, `buttons`\n\n","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `widget`, `buttons`","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `hwnd` on type `&mut toolbar::Toolbar`","spans":[{"byte_end":4909,"byte_start":4905,"column_end":33,"column_start":29,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":"unknown field","line_end":171,"line_start":171,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":29,"text":"            ShowWindow(self.hwnd, SW_HIDE);"}]}]}}
{"error[E0615]: attempted to take value of method `is_visible` on type `&mut toolbar::Toolbar`\n   --> src\\eg\\classes\\toolbar.rs:173:14\n    |\n173 |         self.is_visible = false;\n    |              ^^^^^^^^^^ method, not a field\n    |\n    = help: methods are immutable and cannot be assigned to\n\n","children":[{"children":[],"code":null,"level":"help","message":"methods are immutable and cannot be assigned to","rendered":null,"spans":[]}],"code":{"code":"E0615","explanation":"Attempted to access a method like a field.\n\nErroneous code example:\n\n```compile_fail,E0615\nstruct Foo {\n    x: u32,\n}\n\nimpl Foo {\n    fn method(&self) {}\n}\n\nlet f = Foo { x: 0 };\nf.method; // error: attempted to take value of method `method` on type `Foo`\n```\n\nIf you want to use a method, add `()` after it:\n\n```\n# struct Foo { x: u32 }\n# impl Foo { fn method(&self) {} }\n# let f = Foo { x: 0 };\nf.method();\n```\n\nHowever, if you wanted to access a field of a struct check that the field name\nis spelled correctly. Example:\n\n```\n# struct Foo { x: u32 }\n# impl Foo { fn method(&self) {} }\n# let f = Foo { x: 0 };\nprintln!(\"{}\", f.x);\n```\n"},"level":"error","message":"attempted to take value of method `is_visible` on type `&mut toolbar::Toolbar`","spans":[{"byte_end":4956,"byte_start":4946,"column_end":24,"column_start":14,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":"method, not a field","line_end":173,"line_start":173,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":14,"text":"        self.is_visible = false;"}]}]}}
{"error[E0615]: attempted to take value of method `is_visible` on type `&toolbar::Toolbar`\n   --> src\\eg\\classes\\toolbar.rs:178:14\n    |\n178 |         self.is_visible\n    |              ^^^^^^^^^^ method, not a field\n    |\nhelp: use parentheses to call the method\n    |\n178 |         self.is_visible()\n    |                        ++\n\n","children":[{"children":[],"code":null,"level":"help","message":"use parentheses to call the method","rendered":null,"spans":[{"byte_end":5051,"byte_start":5051,"column_end":24,"column_start":24,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":null,"line_end":178,"line_start":178,"suggested_replacement":"()","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":24,"highlight_start":24,"text":"        self.is_visible"}]}]}],"code":{"code":"E0615","explanation":"Attempted to access a method like a field.\n\nErroneous code example:\n\n```compile_fail,E0615\nstruct Foo {\n    x: u32,\n}\n\nimpl Foo {\n    fn method(&self) {}\n}\n\nlet f = Foo { x: 0 };\nf.method; // error: attempted to take value of method `method` on type `Foo`\n```\n\nIf you want to use a method, add `()` after it:\n\n```\n# struct Foo { x: u32 }\n# impl Foo { fn method(&self) {} }\n# let f = Foo { x: 0 };\nf.method();\n```\n\nHowever, if you wanted to access a field of a struct check that the field name\nis spelled correctly. Example:\n\n```\n# struct Foo { x: u32 }\n# impl Foo { fn method(&self) {} }\n# let f = Foo { x: 0 };\nprintln!(\"{}\", f.x);\n```\n"},"level":"error","message":"attempted to take value of method `is_visible` on type `&toolbar::Toolbar`","spans":[{"byte_end":5051,"byte_start":5041,"column_end":24,"column_start":14,"expansion":null,"file_name":"src\\eg\\classes\\toolbar.rs","is_primary":true,"label":"method, not a field","line_end":178,"line_start":178,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":14,"text":"        self.is_visible"}]}]}}
{"error[E0599]: no method named `map_err` found for struct `LRESULT` in the current scope\n --> src\\win32\\utils.rs:8:49\n  |\n8 |         SendMessageA(hwnd, msg, wparam, lparam).map_err(|e| Error::Win32(format!(\"Failed to send message: {}\", e)))\n  |                                                 ^^^^^^^ method not found in `LRESULT`\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `map_err` found for struct `LRESULT` in the current scope","spans":[{"byte_end":373,"byte_start":366,"column_end":56,"column_start":49,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":true,"label":"method not found in `LRESULT`","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":49,"text":"        SendMessageA(hwnd, msg, wparam, lparam).map_err(|e| Error::Win32(format!(\"Failed to send message: {}\", e)))"}]}]}}
{"error[E0599]: no method named `map_err` found for type `i32` in the current scope\n  --> src\\win32\\utils.rs:21:41\n   |\n21 |         GetWindowTextA(hwnd, &mut text).map_err(|e| Error::Win32(format!(\"Failed to get window text: {}\", e)))?\n   |                                         ^^^^^^^ method not found in `i32`\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `map_err` found for type `i32` in the current scope","spans":[{"byte_end":854,"byte_start":847,"column_end":48,"column_start":41,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":true,"label":"method not found in `i32`","line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":41,"text":"        GetWindowTextA(hwnd, &mut text).map_err(|e| Error::Win32(format!(\"Failed to get window text: {}\", e)))?"}]}]}}
{"error[E0599]: no method named `map_err` found for type `i32` in the current scope\n  --> src\\win32\\utils.rs:95:14\n   |\n94 | /         GetClassNameA(hwnd, &mut name)\n95 | |             .map_err(|e| Error::Win32(format!(\"Failed to get class name: {}\", e)))?\n   | |             -^^^^^^^ method not found in `i32`\n   | |_____________|\n   | \n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `map_err` found for type `i32` in the current scope","spans":[{"byte_end":3023,"byte_start":2978,"column_end":14,"column_start":9,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":false,"label":"","line_end":95,"line_start":94,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":9,"text":"        GetClassNameA(hwnd, &mut name)"},{"highlight_end":14,"highlight_start":1,"text":"            .map_err(|e| Error::Win32(format!(\"Failed to get class name: {}\", e)))?"}]},{"byte_end":3030,"byte_start":3023,"column_end":21,"column_start":14,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":true,"label":"method not found in `i32`","line_end":95,"line_start":95,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":14,"text":"            .map_err(|e| Error::Win32(format!(\"Failed to get class name: {}\", e)))?"}]}]}}
{"error[E0599]: no method named `map_err` found for struct `BOOL` in the current scope\n   --> src\\win32\\utils.rs:137:14\n    |\n136 | /         EnumChildWindows(parent, Some(enum_proc), lparam)\n137 | |             .map_err(|e| Error::Win32(format!(\"Failed to enumerate child windows: {}\", e)))?;\n    | |             -^^^^^^^ method not found in `BOOL`\n    | |_____________|\n    | \n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `map_err` found for struct `BOOL` in the current scope","spans":[{"byte_end":4495,"byte_start":4431,"column_end":14,"column_start":9,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":false,"label":"","line_end":137,"line_start":136,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":9,"text":"        EnumChildWindows(parent, Some(enum_proc), lparam)"},{"highlight_end":14,"highlight_start":1,"text":"            .map_err(|e| Error::Win32(format!(\"Failed to enumerate child windows: {}\", e)))?;"}]},{"byte_end":4502,"byte_start":4495,"column_end":21,"column_start":14,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":true,"label":"method not found in `BOOL`","line_end":137,"line_start":137,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":14,"text":"            .map_err(|e| Error::Win32(format!(\"Failed to enumerate child windows: {}\", e)))?;"}]}]}}
{"error[E0606]: casting `&mut std::boxed::Box<std::boxed::Box<dyn FnMut(HWND) -> bool>>` as `*mut std::boxed::Box<dyn FnMut(HWND) -> bool>` is invalid\n   --> src\\win32\\utils.rs:134:29\n    |\n134 |         let lparam = LPARAM((&mut boxed_callback as *mut Box<dyn FnMut(HWND) -> bool>) as isize);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","children":[],"code":{"code":"E0606","explanation":"An incompatible cast was attempted.\n\nErroneous code example:\n\n```compile_fail,E0606\nlet x = &0u8; // Here, `x` is a `&u8`.\nlet y: u32 = x as u32; // error: casting `&u8` as `u32` is invalid\n```\n\nWhen casting, keep in mind that only primitive types can be cast into each\nother. Example:\n\n```\nlet x = &0u8;\nlet y: u32 = *x as u32; // We dereference it first and then cast it.\n```\n\nFor more information about casts, take a look at the Type cast section in\n[The Reference Book][1].\n\n[1]: https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\n"},"level":"error","message":"casting `&mut std::boxed::Box<std::boxed::Box<dyn FnMut(HWND) -> bool>>` as `*mut std::boxed::Box<dyn FnMut(HWND) -> bool>` is invalid","spans":[{"byte_end":4400,"byte_start":4342,"column_end":87,"column_start":29,"expansion":null,"file_name":"src\\win32\\utils.rs","is_primary":true,"label":null,"line_end":134,"line_start":134,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":87,"highlight_start":29,"text":"        let lparam = LPARAM((&mut boxed_callback as *mut Box<dyn FnMut(HWND) -> bool>) as isize);"}]}]}}
{"reason":"compiler-message","package_id":"eventghost 0.1.0 (path+file:///C:/Users/Dan/lab/madness_interactive/projects/rust/EventGhost-Rust)","manifest_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"eventghost","src_path":"C:\\Users\\Dan\\lab\\madness_interactive\\projects\\rust\\EventGhost-Rust\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error: aborting due to 26 previous errors\n\n","children":[],"code":null,"level":"error","message":"aborting due to 26 previous errors","spans":[]}}
